#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\begin_preamble
\input{lyx_preamble}
\end_preamble
\use_default_options true
\master thesis_master.lyx
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans helvet
\font_typewriter default
\font_default_family sfdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing double
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\start_of_appendix
e4C analysis scripts
\end_layout

\begin_layout Section
e4C sequence processing and trimming 
\begin_inset CommandInset label
LatexCommand label
name "sec:APP-library-trimming-script"

\end_inset


\end_layout

\begin_layout Standard
Not sure if this should go in as I didn't write it?
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{1}
\end_layout

\begin_layout Plain Layout


\backslash
include{figures/scripts/sort_prey_seqs_according_to_bait_barcode.pl}
\end_layout

\begin_layout Plain Layout


\backslash
linespread{2}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section

\emph on
In-silico
\emph default
 restriction fragment libraries 
\begin_inset CommandInset label
LatexCommand label
name "sec:APP-in-silico-restriction-fragments"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{1}
\end_layout

\begin_layout Plain Layout


\backslash
include{figures/scripts/potential_hits.pl}
\end_layout

\begin_layout Plain Layout


\backslash
linespread{2}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
GC content and fragment length bias detection 
\begin_inset CommandInset label
LatexCommand label
name "sec:APP-GC-content-bias"

\end_inset


\end_layout

\begin_layout Section
Systematic bias correction 
\begin_inset CommandInset label
LatexCommand label
name "sec:APP-systematic-bias-correction"

\end_inset


\end_layout

\begin_layout Section
Restriction fragment distribution normalisation
\end_layout

\begin_layout Subsection
inputminted method
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
in preamble: 
\backslash
usepackage{minted}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{1}
\end_layout

\begin_layout Plain Layout


\backslash
inputminted{perl}{figures/scripts/make_windows.pl}
\end_layout

\begin_layout Plain Layout


\backslash
linespread{2}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
LaTeX include method
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{1}
\end_layout

\begin_layout Plain Layout


\backslash
include{figures/scripts/make_windows.pl}
\end_layout

\begin_layout Plain Layout


\backslash
linespread{2}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Lyx include child document method
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{1}
\end_layout

\end_inset


\begin_inset CommandInset include
LatexCommand verbatiminput
filename "figures/scripts/make_windows.pl"
lstparams "caption={make_windows.pl},label={make_windows.pl}"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{2}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Copy and paste method
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
linespread{1}
\end_layout

\begin_layout Plain Layout


\backslash
begin{minted}{perl}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#!/usr/bin/perl
\end_layout

\begin_layout Plain Layout

use warnings;
\end_layout

\begin_layout Plain Layout

use strict;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

my ($infile,$outfile,$window,$min_count) = @ARGV;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

unless (defined $min_count) {
\end_layout

\begin_layout Plain Layout

  die "Usage is make_windows.pl [input file] [output file] [window size]
 [minimum count]
\backslash
n";
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

open (IN,$infile) or die "Can't read $infile: $!";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if (-e $outfile) {
\end_layout

\begin_layout Plain Layout

  print "$outfile already exists.
  Overwrite [Y/N]?";
\end_layout

\begin_layout Plain Layout

  my $answer = <STDIN>;
\end_layout

\begin_layout Plain Layout

  if ($answer !~ /^y/i) {
\end_layout

\begin_layout Plain Layout

    die "Exiting...
\backslash
n";
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

open (OUT,'>',$outfile) or die "Can't write to $outfile: $!";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# This is the store of lines we're currently dealing with
\end_layout

\begin_layout Plain Layout

my @current_lines;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# This is the chromosome we're dealing with
\end_layout

\begin_layout Plain Layout

my $last_chromosome = '';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Record the header
\end_layout

\begin_layout Plain Layout

my $header = <IN>;
\end_layout

\begin_layout Plain Layout

chomp $header;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

my @header = split(/
\backslash
t/,$header);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for my $l (0 ..
 $#header) {
\end_layout

\begin_layout Plain Layout

	warn "header[$l] = $header[$l]
\backslash
n";
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

print OUT join("
\backslash
t",qw(Chr Start End Count),@header[10..$#header]),"
\backslash
n";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

while (<IN>) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  chomp;
\end_layout

\begin_layout Plain Layout

  my @sections = split(/
\backslash
t/);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  # Check for putting out a status update
\end_layout

\begin_layout Plain Layout

  if ($sections[1] ne $last_chromosome) {
\end_layout

\begin_layout Plain Layout

    warn "Processing Chromosome $sections[1]
\backslash
n";
\end_layout

\begin_layout Plain Layout

    $last_chromosome = $sections[1];
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (@current_lines) {
\end_layout

\begin_layout Plain Layout

    # Check if we can add this to the existing set
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if ($current_lines[0]->[1] eq $sections[1]
\end_layout

\begin_layout Plain Layout

		and int ($current_lines[0]->[2] / $window) == int ($sections[3] / $window))
 {
\end_layout

\begin_layout Plain Layout

      push @current_lines,
\backslash
@sections;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    else {
\end_layout

\begin_layout Plain Layout

      check_valid_group(@current_lines);
\end_layout

\begin_layout Plain Layout

      @current_lines = (
\backslash
@sections);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  else {
\end_layout

\begin_layout Plain Layout

    push @current_lines, 
\backslash
@sections;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

sub check_valid_group {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  my @sections = @_;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if (@sections < $min_count) {
\end_layout

\begin_layout Plain Layout

    return;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  # If we're keeping this then we need to work out
\end_layout

\begin_layout Plain Layout

  # the position of the window and record the 
\end_layout

\begin_layout Plain Layout

  # number of hits and the average measure for
\end_layout

\begin_layout Plain Layout

  # each sample
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  my $window_start = $window * int($sections[0]->[2]/$window);
\end_layout

\begin_layout Plain Layout

  my $window_end = $window_start + $window;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  my @line = ($sections[0]->[1],$window_start,$window_end, scalar @sections);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  for my $index (10..$#header) {
\end_layout

\begin_layout Plain Layout

    my $average;
\end_layout

\begin_layout Plain Layout

    foreach my $probe (@sections) {
\end_layout

\begin_layout Plain Layout

      $average += $probe->[$index];
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    $average /= @sections;
\end_layout

\begin_layout Plain Layout

    push @line, $average;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

  print OUT join("
\backslash
t",@line),"
\backslash
n";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{minted}
\end_layout

\begin_layout Plain Layout


\backslash
linespread{2}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Hi-C 
\begin_inset CommandInset label
LatexCommand label
name "chap:APP-Hi-C"

\end_inset


\end_layout

\begin_layout Chapter
Other Perl scripts and R scripts used
\end_layout

\begin_layout Chapter
Web Tools 
\begin_inset CommandInset label
LatexCommand label
name "chap:APP-Web-Tools"

\end_inset


\end_layout

\begin_layout Section
Publicly available tools I’ve written - Cytobands, Genome RE Sites, Sequences.
 Mention traffic.
\end_layout

\begin_layout Section
Talk about contribution to FastQC 
\end_layout

\begin_layout Chapter
Publications
\end_layout

\begin_layout Standard
Meet the neighbours: tools to dissect nuclear structure and function
\end_layout

\begin_layout Standard
Osborne CS, 
\series bold
Ewels PA
\series default
, Young AN
\end_layout

\begin_layout Standard
Briefings in Functional Genomics (2011) 10(1), 11-7
\end_layout

\end_body
\end_document
